import sqlite3  # database for SQLite
from sqlite3 import Error  # libraries
from random import randrange

class Bank:
        issuer_identification_number = str(400000)  # IIN
        id = 'null'

        def __init__(self):
                #self.connection = Bank.create_connection("bank_accounts.db")  # ordinary base
                self.connection = Bank.create_connection("card.s3db")
                Bank.database(self)

        def create_connection(path):  # connection with libraries
                connection = None
                try:
                        connection = sqlite3.connect(path)
                        #print("Connection to SQLite DB successful")
                except Error as e:
                        print(f"The error '{e}' occurred")

                return connection

        def execute_query(connection, query):  # cursor position
                cursor = connection.cursor()
                try:
                        cursor.execute(query)
                        connection.commit()
                        # print("Query executed successfully")
                except Error as e:
                        print(f"The error '{e}' occurred")

        @staticmethod
        def database(self):
                #delete_table = ("DROP TABLE IF EXISTS card;")
                #Bank.execute_query(self.connection, delete_table)

                create_users_table = (""" 
                CREATE TABLE IF NOT EXISTS card (
                    id INTEGER PRIMARY KEY ASC,
                    number TEXT,
                    pin TEXT,
                    balance INTEGER DEFAULT 0
                )""")

                Bank.execute_query(self.connection, create_users_table)  # saves changes

        def main_options(self):  # Main menu
                self.choose = input('1. Create an account\n'
                                    '2. Log into account\n'
                                    '0. Exit\n')
                if self.choose == '1':
                        print('\nYour card has been created')
                        Bank.card_code(self)
                        Bank.__str__(self)
                        Bank.main_options(self)
                elif self.choose == '2':
                        Bank.log_in(self)
                        Bank.main_options(self)
                elif self.choose == '0':
                        Bank.exit()
                else:
                        print('\nWrong command number. Choose a different number.\n')
                        Bank.main_options(self)

        def __str__(self):  # Displaying messages
                if self.choose == '1':
                        print(f'Your card number:\n''{}\nYour card pin:\n{}\n'.format(self.card_number,
                                                                                      self.pin_number))

        def log_in(self):  # Account login menu
                self.account_number = input('\nEnter your card number:\n')
                pin_number = input('Enter your PIN:\n')
                for account in self.connection.execute("SELECT (number) FROM card"):
                        account = list(account)
                if self.account_number in account:
                        data_account = [self.account_number]
                        for data_pin in self.connection.execute("SELECT pin FROM card WHERE number=?", data_account):
                                account_pin = list(data_pin)
                        if account_pin[0] == pin_number:
                                print('\nYou have successfully logged in!\n')
                                Bank.account_balance_menu(self)
                        else:
                                print('\nWrong PIN number!\n')
                                Bank.main_options(self)
                else:
                        print('\nWrong card number!\n')
                        Bank.main_options(self)

        def exit():
                print('\nBye!')
                exit()

        def account_balance_menu(self):
                self.choose = input('1. Balance\n'
                                    '2. Log out\n'
                                    '0. Exit\n')
                if self.choose == '1':
                        data_account = [self.account_number]
                        for balance_amount in self.connection.execute("SELECT balance FROM card WHERE number=?",
                                                                data_account):
                                print(f'\nBalance: {balance_amount[0]}\n')
                        Bank.account_balance_menu(self)
                elif self.choose == '2':
                        print('\nYou have successfully logged out!\n')
                        Bank.main_options(self)
                elif self.choose == '0':
                        Bank.exit()
                else:
                        print('\nWrong command number. Choose a different number.\n')
                        Bank.account_balance_menu(self)

        def verification(self):  # if such an account number exists, create it again
                verification = [x[0] for x in self.connection.execute("SELECT number FROM card")]
                for number in verification:
                        if int(number) == self.card_number:
                                Bank.card_code(self)

        def card_code(self):  # Create a 9-digit account number and assign a PIN to it
                self.customer_account_number = (str(randrange(999999999))).zfill(9)
                self.card_number = Bank.checksum(self)
                Bank.pin_code(self)
                Bank.verification(self)
                self.balance = 0
                data = [(self.card_number, self.pin_number, self.balance)]
                self.connection.executemany("INSERT INTO card (number, pin, balance) VALUES (?, ?, ?)", data)
                self.connection.commit()
                return self.card_number, self.pin_number

        def checksum(self):
                sum_list = Bank.luhn_algorithm(self)
                digit_sum = 0
                for digit in sum_list:
                        digit_sum += int(digit)
                if digit_sum % 10 == 0:
                        card_number = Bank.issuer_identification_number + self.customer_account_number
                        control_number = 0
                else:
                        control_number = digit_sum % 10
                if control_number == 0:
                        card_number = Bank.issuer_identification_number + self.customer_account_number + '0'
                else:
                        Luhn_number = 10 - control_number
                        card_number = Bank.issuer_identification_number + self.customer_account_number + str(Luhn_number)
                return card_number

        def luhn_algorithm(self):
                digit_list = []
                digits_for_luhn = Bank.issuer_identification_number + self.customer_account_number
                for digit in digits_for_luhn:
                        digit_list += digit
                for i in range(0, 15):  # Multiply odd digits by 2:
                        if (i % 2) == 0:
                                digit_list[int(i)] = str(int(digit_list[int(i)]) * 2)
                for i in range(0, 15):  # Subtract 9 to numbers over 9:
                        if int(digit_list[int(i)]) > 9:
                                digit_list[int(i)] = str(int(digit_list[int(i)]) - 9)
                return digit_list

        def pin_code(self):  # Create a 4 digit PIN
                self.pin_number = (str(randrange(9999))).zfill(4)
                return self.pin_number

bank = Bank()
bank.main_options()
